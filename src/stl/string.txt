rem concatonates two strings
proc strcat(a, b) {
	str = array(len(a) + len(b))
	i = 0
	while i < len(a) {
		str[i] = a[i]
		i++
	}
	i = 0
	while i < len(b) {
		str[i + len(a)] = b[i]
		i++
	}
	return str
}

rem gets a substring
proc substr(str, start, stop) {
	substr = array(stop - start)
	i = start
	while i < stop {
		substr[i - start] = str[i++]
	}
	return substr
}

rem Inserts padding on the right of a string
proc pad_right(str, char, size) {
	pad_str = array(size)
	i = 0
	while i < len(str) {
		pad_str[i] = str[i]
		i++
	}
	while i < size {
		pad_str[i++] = char
	}
	return pad_str
}

proc index_of(string, char, offset) {
	i = offset
	while i < len(string) {
		if string[i] == char {
			return i
		}
		i++
	}
	return -1 //not found
}

rem Splits a string by character
proc split(string, char) {
	//probe token count
	occr = 0
	offset = 0
	while offset != -1 { 
		offset = index_of(string, char, offset + 1)
		occr++
	}
	
	sections = array(occr)

	//probe individual token counts
	section_i = 0
	current_sect = 0
	i = 0
	while i < len(string) {
		if string[i] == char {
			sections[current_sect] = array(section_i)
			current_sect++
			section_i = 0
		}
		else {
			section_i++
		}
		i++
	}
	sections[current_sect] = array(section_i)

	//read into token buffers
	section_i = 0
	current_sect = 0
	i = 0
	while i < len(string) {
		if string[i] == char {
			current_sect++
			section_i = 0
		}
		else {
			sections[current_sect][section_i++] = string[i]
		}
		i++
	}

	return sections
}

rem joins strings together
proc join(strings, seperator) {
	probe_len = 0
	i = 0
	while i < len(strings) {
		if i > 0 {
			probe_len = probe_len + len(seperator)
		}
		probe_len = probe_len + len(strings[i])
		i++
	}
	joined_str = array(probe_len)
	i = 0
	k = 0
	while i < len(strings) {
		if i != 0 {
			for char in seperator {
				joined_str[k++] = char
			}
		}
		for char in strings[i] {
			joined_str[k++] = char
		}
		i++
	}
	return joined_str
}