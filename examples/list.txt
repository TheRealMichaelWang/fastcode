rem FastCode - Standard Library Lists
rem Written by Michael Wang

rem Due to the inherent limitations of FastCode's array...
rem implementations, the standard library must implement...
rem a data structure which can dynamically grow and collapse...
rem in size.

rem this is the basic "list" type. 
struct node {
	value,
	next
}

rem pushes an value to the END of the list
procedure push(head, value) {
	if head == null {
		head = new node
		head.value = value
	}
	else {
		current = head
		while current.next != null {
			current = current.next
		}
		current.next = new node
		current.next.value = value
	}
}

rem returns and removes the last item in a list
procedure pop(head) {
	if head == null {
		return null
	}
	else {
		current = head
		while current.next != null {
			current = current.next
		}
		val = current.value
		current = null
		return val
	}
}

rem returns the size of a list
procedure size(head) {
	count = 0
	current = head
	while current != null {
		current = current.next
		count++
	}
	return count
}

rem determines whether a list is empty
procedure isEmpty(head){
	return head == null
}

list = null; i = 0
while i < 10 {
	push(list, i)
	i++
}
while !isEmpty(list) {
	printl(pop(list))
}