rem strlib
rem Written by Michael Wang, 2020-2021

rem A library that supports string building and tokenization whilst keeping away from arrays.

include "pattern.txt"

group strlib

static whitespace = " \t\r\n"

struct _char_node {
	char
	next
}

struct builder {
	_head
	size
}

struct lexer {
	_str
	_index
	last_char
	excluded_chars
	size
}

proc builder() {
	builder = new builder
	builder.size = 0
	return builder
}

proc append_c(builder, char) {
	new_node = new _char_node
	new_node.char = char
	new_node.next = builder._head
	builder._head = new_node
	builder.size++
}

proc append(builder, str) {
	i = 0
	len = len(str)
	while i < len => append_c(builder, str[i++])
}

proc build(builder) {
	new_str = array(builder.size)
	i = builder.size - 1
	current = builder._head
	while current != null {
		new_str[i--] = current.char
		current = ref current.next
	}
	return new_str
}

proc lexer(str) {
	lexer = new lexer
	lexer._str = str
	lexer._index = 0
	lexer.size = len(str)
	lexer._index = 1
	lexer.last_char = str[0]
	lexer.excluded_chars = []
	return lexer
}

proc eos(lexer) => return lexer.last_char == 0

proc last_char(lexer) {
	return lexer.last_char
}

proc read_char(lexer) {
	if lexer._index == lexer.size {
		return lexer.last_char = 0
	}
	rchar = (lexer.last_char = lexer._str[lexer._index++])
	if count@linq(lexer.excluded_chars, rchar) =>
		return read_char(lexer)
	else =>
		return rchar
}

proc read_till_c(lexer, stopchars) {
	builder = builder()
	if eos(lexer) => return null
	while !eos(lexer) and !count@linq(stopchars, lexer.last_char) {
		append_c(builder, lexer.last_char)
		read_char(lexer)
	}
	return build(builder)
}

proc read_while(lexer, stopchars) {
	builder = builder()
	if eos(lexer) => return null
	while !eos(lexer) and count@linq(stopchars, lexer.last_char) {
		append_c(builder, lexer.last_char)
		read_char(lexer)
	}
	return build(builder)
}

proc read_till(lexer, pattern) {
	builder = builder()
	if eos(lexer) => return null
	while !eos(lexer) and !match@pattern(lexer._str, lexer._index - 1, pattern) {
		append_c(builder, lexer.last_char)
		read_char(lexer)
	}
	return build(builder)
}

proc read_end(lexer) {
	builder = builder()
	while !eos(lexer) {
		append_c(builder, lexer.last_char)
		read_char(lexer)
	}
	return build(builder)
}

proc read_tok(lexer, stopchars) {
	read_while(lexer, stopchars)
	return read_till_c(lexer, stopchars)
}

endgroup

group str

proc split_c(str, split_chars) {
	lexer = lexer@strlib(str)
	split_toks = []
	while !eos@strlib(lexer) {
		split_toks = split_toks + [read_till_c@strlib(lexer, split_chars)]
		read_while@strlib(lexer, split_chars)
	}
	return split_toks
}

proc split(str, pattern) {
	lexer = lexer@strlib(str)
	split_toks = []
	while !eos@strlib(lexer) {
		split_toks = split_toks + [read_till@strlib(lexer, pattern)]
		for i in range(len(pattern)) => read_char@strlib(lexer)
	}
	return split_toks
}

proc is_whitespace(str) {
	if len(str) == 0 => return true
	for char in str {
		if char != ' ' and char != '\t' and char != '\r' => return false
	}
	return true
}

proc replace(str, to_replace, replace_with) {
	builder = builder@strlib()
	i = 0
	while i < len(str) {
		if match@pattern(str, i, to_replace) {
			append@strlib(builder, replace_with)
			i = i + len(to_replace) - 1
		}
		else =>
			append_c@strlib(builder, str[i])
		i++
	}
	return build@strlib(builder)
}

proc cat_col(items) {
	builder = builder@strlib()
	for item in items {
		if typeof(item) == numtype =>
			append@strlib(builder, str(item))
		elif typeof(item) == chartype =>
			append_c@strlib(builder, item)
		elif typeof(item) == coltype =>
			append@strlib(builder, item)
		else =>
			abort("Did not expect type ", typeof(item), ".")
	}
	return build@strlib(builder)
}

proc cat(params args) => return cat_col(args)

proc substr(str, substr) => return contains@pattern(str, substr)

proc starts_with(str, pat) => return begins@pattern(str, pat)

proc ends_with(str, pat) => return ends@pattern(str, pat)

endgroup